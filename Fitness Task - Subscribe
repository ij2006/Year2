def valid_subscribe_routine():
    # Insert subscribe into db
    info('Success', 'Account updated!')
    global glb_user_logged_in
    mysql = ("UPDATE User_Table SET user_premium_status = 'True', user_weight = '" + subscribe_weight_input.value + "', user_DOB = '" + subscribe_DOB_input.value + "', user_height = '" + subscribe_height_input.value + "', user_diet_preference = '" + subscribe_diet_input.value + "', user_goal_weight = '" + subscribe_weight_input.value + "', user_card_number = '" + subscribe_card_input.value + "'WHERE userID = '" + str(glb_user_logged_in) + "' ") 
    glb_user_logged_in = execute_sql(database_file, mysql)
    subscribe_window.hide()
    login_window.show()



def subscribe_routine():
    # Assigning values to allow .isnumeric to be used by removing .value in the if statement
    weight = subscribe_weight_input.value
    height = subscribe_height_input.value
    card = subscribe_card_input.value
    # Presence checks
    if weight == '':
        info('Error', 'You must enter your weight')
    elif subscribe_DOB_input.value == '':
        info('Error', 'You must enter your DOB')
    elif height == '':
        info('Error', 'You must enter your height')
    elif card == '':
        info('Error', 'You must enter your card number')
    elif weight.isnumeric() == True and  height.isnumeric() == True and card.isnumeric() == True:
        # Convert values into float or int in order to simplify the following elif statements
        float_weight = float(weight)
        float_height = float(height)
        # Range checks
        if float_weight > 600 or float_weight < 40:
            info('Error', 'Invalid weight entered')
        elif float_height > 250 or float_height < 100:
            info('Error', 'Invalid height entered')
        elif len(card) > 19 or len(card) < 16:
            info('Error', 'Invalid card number entered')
        elif check_date_format(subscribe_DOB_input.value) == False:
            info('Error',"Incorrect date: Date must be valid and in the format YYYY-MM-DD")
        elif check_age(subscribe_DOB_input.value) == False:
            info('Error', 'You must be over 18 to subscribe to premium')
        else:
            valid_subscribe_routine()
    else:
        # Type check
        if weight.isnumeric() == False:
            info('Error', 'Invalid weight entered')
        elif height.isnumeric() == False:
            info('Error', 'Invalid height entered')
        elif card.isnumeric() == False:
            info('Error', 'Invalid card number entered')

def go_to_info():
    info('i', 'This is so that we can provde information relevant to you and target the most relevant advice to you.')


def go_to_dashboard():
    # Show dashboard window and hide the linked windows
    dashboard_window.show()
    premium_fitness_window.hide()
    premium_health_window.hide()
    subscribe_window.hide()
    free_fitness_window.hide()
    free_health_window.hide()
    sign_up_window.hide()

#################
# # Subscribe # #
#################
# Create window + box 
subscribe_window = Window(app, title = 'Subscribe', height = 350, width = 775) # Creeate subscribe window
subscribe_box = Box(subscribe_window, align = 'top', width = 725, height = 'fill', layout = 'grid') # Create box in subscribe up window
# Fill box 
subscribe_lable = Text(subscribe_box, text = 'Become a premium user!', size = 20, grid = [2,0]) # Adds lable to subscribe window
subscribe_logo = Picture(subscribe_box, image = 'Toka_Logo.png', grid = [3,0], height = 50, width = 90) # Add logo to subscribe window
subscribe_cost = Text(subscribe_box, text = 'Â£9.99 per month', size = 15, grid = [3,2]) 
subscribe_weight_lable = Text(subscribe_box, text = 'Enter weight in kg:', grid = [1,1], align = 'right') 
subscribe_weight_input = TextBox(subscribe_box, width = 20, grid = [2,1])
subscribe_DOB_lable = Text(subscribe_box, text = 'Enter date of birth:', grid = [1,2], align = 'right') 
subscribe_DOB_input = TextBox(subscribe_box, width = 20, grid = [2,2])
subscribe_height_lable = Text(subscribe_box, text = 'Enter height in cm:', grid = [1,3], align = 'right') 
subscribe_height_input = TextBox(subscribe_box, width = 20, grid = [2,3])
subscribe_card_lable = Text(subscribe_box, text = 'Enter card number:', grid = [1,4], align = 'right') 
subscribe_card_input = TextBox(subscribe_box, width = 20, grid = [2,4])
subscribe_diet_lable = Text(subscribe_box, text = 'Select diet preference:', grid = [1,5], align = 'right') 
subscribe_diet_input = Combo(subscribe_box, options = ['Vegan', 'Vegetarian', 'Pescatarian', 'Meat eater'], grid = [2,5])
ubscribe_subscribe_button = PushButton(subscribe_box, text = 'Subscribe',grid = [2,8], command = subscribe_routine) # Subscribe button to promts subscribe routine function
subscribe_info_button = PushButton(subscribe_box, text = 'Why do we need this \ninformation?', grid = [1,9], command = go_to_info) 
subscribe_back_button = PushButton(subscribe_box, text = 'Back', grid = [3,9], command = go_to_dashboard) # Adds back button into subscribe box that runs the go to dashboard procedure
# Improve layout of box
subscribe_blank_row1 = Text(subscribe_box, text = ' ', grid = [0,7]) # Creates space between two rows to improve appearance
subscribe_blank_row2 = Text(subscribe_box, text = ' ', grid = [0,0], width = 5, height = 3) # Creates space between two rows to improve appearance
#subscribe_up_blank_column1 = Text(subscribe_box, text = ' ', grid = [2,0]) # Creates space between two columns to improve appearance
# Create colour scheme
subscribe_window.bg = light_purple
subscribe_box.bg = 'white'
subscribe_lable.text_color = light_purple
subscribe_cost.text_color = pink
subscribe_weight_input.bg = light_purple
subscribe_DOB_input.bg = light_purple
subscribe_height_input.bg = light_purple
subscribe_diet_input.bg = light_purple
subscribe_card_input.bg = light_purple
ubscribe_subscribe_button.bg = light_purple
subscribe_info_button.bg = light_purple
subscribe_back_button.bg = light_purple
# Hide window
subscribe_window.hide()
