def save_health_journal():
    # Validate the inputted values and save the users jounal into the db once values are validated
    # Create variables for users inputs so that .isnumeric validation can be carried out on them
    journal = premium_health_log_journal_entry.value
    water = premium_health_log_water_entry.value
    calories = premium_health_log_calorie_entry.value
    if len(journal) < 2:
         info('Error', 'Journal is empty')  # If user has not made an entry an error message occurs
    elif water == '':
        info('Error', 'Enter water consumption')  # If user has not made an entry an error message occurs
    elif calories == '':
        info('Error', 'Enter calories consumed') # If user has not made an entry an error message occurs
    elif len(journal) > 50:
        info('Error', '50 character limit exceeded on journal') # If the journal is too long then an error message will occur
    elif check_number(water, 'Water consumption', 0.1, 10) == False:
        info('Error','Water consumption must be between 0.1 and 10, inclusive')
    elif check_number(calories,'Calorie consumption', 0, 10000) == False:
        info('Error', 'Calories consumed must be  between 0 and 10000')
    else:
        # Create new user
        global glb_user_logged_in
        # Call function to get todays date
        log_date = get_todays_date()
        print(log_date)
        mysql = ("INSERT INTO Health_Journal_Table(health_journal_date, health_journal_entry, health_journal_mood, health_journal_calories, health_journal_water, userID) VALUES ('"+ str(log_date) + "','" + str(premium_health_log_journal_entry.value) + "','" + str(premium_health_log_choose_workout_record_combo.value) + "','" + str(premium_health_log_calorie_entry.value) + "','" + str(premium_health_log_water_entry.value) + "','" + str(glb_user_logged_in) + "')")
        execute_sql(database_file, mysql)
        info('Success','Your health journal has been saved')


def display_selected_diet(selected_value):
    # Open website in a new browser for the selected combo value
    if selected_value == 'Weight loss':
        webbrowser.open_new_tab('https://www.healthline.com/nutrition/most-weight-loss-friendly-foods')
    elif selected_value == 'Gain weight':
        webbrowser.open_new_tab('https://www.healthline.com/nutrition/18-foods-to-gain-weight')
    elif selected_value == 'Cut':
        webbrowser.open_new_tab('https://www.healthline.com/nutrition/cutting-diet')
    elif selected_value == 'Bulk':
        webbrowser.open_new_tab('https://www.myprotein.com/thezone/nutrition/bulking-diet/')
    elif selected_value == 'Muscle gain':
        webbrowser.open_new_tab('https://www.healthline.com/nutrition/26-muscle-building-foods')


def plot_calories():
    # Creating a line graph to plot calories consumed
    global glb_user_logged_in
    # Join tables together using SQL and dreate dataframe
    conn = sqlite3.connect(database_file)
    cursor = conn.cursor()
    cursor.execute("SELECT health_journal_calories, health_journal_date from Health_Journal_Table where userID =" + str(glb_user_logged_in)+"")
    df = pd.DataFrame(cursor.fetchall(), columns = ['health_journal_calories', 'health_journal_date'])
    # Create line graph
    plt.plot(df['health_journal_date'], df['health_journal_calories'].astype(int))
    plt.xlabel('Entry date')
    plt.xticks(rotation = 45)
    plt.ylabel('Calories consumed')
    plt.title('Calorie consumption tracking')
    plt.show()

def plot_water_leaderboard():
    # Creating a pie chart using groupby
    global glb_user_logged_in
    # Join tables together using SQL and dreate dataframe
    conn = sqlite3.connect(database_file)
    cursor = conn.cursor()
    cursor.execute("SELECT User_Table.userID, username, health_journal_water from User_Table, Health_Journal_Table where User_Table.userID = Health_Journal_Table.userID")
    df = pd.DataFrame(cursor.fetchall(), columns = ['userID', 'username', 'health_journal_water'])
    print(df)

    # Group by username
    dftotal = df.groupby(['username'])['health_journal_water'].sum().reset_index()
    print(dftotal)

    # Make the pie chart
    mycolours = ['lightskyblue', 'cornflowerblue', '#ADD8E6', '#ff9999', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6'] # Colour codes
    plt.pie(dftotal['health_journal_water'], labels = dftotal['health_journal_water'], colors = mycolours)
    plt.legend(dftotal['username'], title = 'Username', bbox_to_anchor=(0.85,1.025), loc = 'upper left') # Positions the key away from the pie chart
    plt.title('Compare total water consumed with all premium users')
    plt.show()

#############################
# # Premium health window # #
#############################
# Create window + box #
premium_health_window = Window(app, title = 'Premium health content', height = 570, width = 1300)
premium_health_box = Box(premium_health_window, align = 'top', width = 1200, height = 'fill', layout = 'grid')
# Main box #
premium_health_logo = Picture(premium_health_box, image = 'Toka_Logo.png', grid = [3,0], align = 'right', height = 50, width = 90) # Add premiuim health content window
premium_health_icon = Picture(premium_health_box, image = 'Health_icon.png', grid = [2,0], height = 50, width = 50, align = 'left') # Add premiuim health content window
premium_health_title = Text(premium_health_box, text = 'Health advice & tracking', grid = [1,0], align = 'right', size = 20) # Adds lable to premiuim health content window
premium_health_back_button = PushButton(premium_health_box, text = 'Back', grid = [3,5], width = 15, height = 2, align = 'right', command = go_to_dashboard) 
# Exercise log box #
premium_health_log_box =  Box(premium_health_box, grid = [1,3], align = 'top', width = 300, height = 700, layout = 'grid', border = True)
premium_health_log_title = Text(premium_health_log_box, text = 'Add Health and Welbeing Journal', grid = [1,1], size = 15) # Adds title to premiuim health content box
premium_health_log_lable = Text(premium_health_log_box, text = 'Mood rationg for today:', grid = [1,3], align = 'left') # Adds lable to premiuim health content box
premium_health_log_choose_workout_record_combo = Combo(premium_health_log_box, options = ['1', '2', '3', '4', '5'], grid = [2,3], align = 'left')
premium_health_log_journal_lable = Text(premium_health_log_box, text = 'Journal entry:', grid = [1,5], align = 'left')
premium_health_log_journal_entry = TextBox(premium_health_log_box, multiline = True, grid = [2,5])
premium_health_log_calorie_consumption = Text(premium_health_log_box, text = 'Log todays calorie consumption:', grid = [1,7], align = 'left')
premium_health_log_calorie_entry = TextBox(premium_health_log_box, grid = [2,7], align = 'left')
premium_health_log_water_consumption = Text(premium_health_log_box, text = 'Enter water consumption for the day:', grid = [1,9], align = 'left')
premium_health_log_water_entry = TextBox(premium_health_log_box, grid = [2,9], align = 'left')
premium_health_log_save_button = PushButton(premium_health_log_box, text = 'Save', grid = [3,11], command = save_health_journal)
# Right hand box #
premium_health_right_box = Box(premium_health_box, grid = [3,3], align = 'top', width = 300, height = 700, layout = 'grid', border = True)
premium_health_right_title = Text(premium_health_right_box, text = 'Dieting' , grid = [1,1], size = 15, align = 'left')
premium_health_right_start_diet = Text(premium_health_right_box, text = 'Start a diet:', grid = [1,9], align = 'left')
premium_health_right_diet_combo = Combo(premium_health_right_box, options = ['Weight loss', 'Gain weight', 'Cut', 'Bulk', 'Muscle gain'], grid = [1,9], command = display_selected_diet)
premium_health_right_calorie_history = PushButton(premium_health_right_box, text = 'Calorie consumption history', grid = [1,3], align = 'left', command = plot_calories)
premium_health_right_water_history = PushButton(premium_health_right_box, text = 'Water consumption leaderboard', grid = [1,3], align = 'right', command = plot_water_leaderboard)
premium_health_male_calorie_text = Text(premium_health_right_box, text = 'The average MALE should consume 2,500kcals per day', grid = [1,5])
premium_health_female_calorie_text = Text(premium_health_right_box, text = 'The average FEMALE should consume 2,000kcals per day', grid = [1,7])
# Improve layout of window #
# Main window
premium_health_blank_column1 = Text(premium_health_box, text = ' ', grid = [0,0], width = 4) # Creates space between two columns to improve appearance
premium_health_blank_column2 = Text(premium_health_box, text = ' ', grid = [4,0], width = 10) # Creates space between two columns to improve appearance
premium_health_blank_row1 = Text(premium_health_box, text = ' ', grid = [0,2], height = 2) # Creates space between two rows to improve appearance
premium_health_blank_row2 = Text(premium_health_box, text = ' ', grid = [0,4], height = 2) # Creates space between two rows to improve appearance
premium_health_blank_row3 = Text(premium_health_box, text = ' ', grid = [0,5], height = 2) # Creates space between two rows to improve appearance
# Log box
premium_health_log_blank_row1 = Text(premium_health_log_box, text = ' ', grid = [0,0], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_row2 = Text(premium_health_log_box, text = ' ', grid = [0,2], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_row3 = Text(premium_health_log_box, text = ' ', grid = [0,4], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_row4 = Text(premium_health_log_box, text = ' ', grid = [0,6], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_row5 = Text(premium_health_log_box, text = ' ', grid = [0,8], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_row6 = Text(premium_health_log_box, text = ' ', grid = [0,10], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_log_blank_column1 = Text(premium_health_log_box, text = ' ', grid = [4,12], width = 1, height = 1) # Creates space between two columns to improve appearance
# Right box
premium_health_right_blank_row1 = Text(premium_health_right_box, text = ' ', grid = [0,0], height = 1, width = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row2 = Text(premium_health_right_box, text = ' ', grid = [0,4], width = 1, height = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row3 = Text(premium_health_right_box, text = ' ', grid = [0,6], width = 1, height = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row4 = Text(premium_health_right_box, text = ' ', grid = [0,8], width = 1, height = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row5 = Text(premium_health_right_box, text = ' ', grid = [4,10], width = 1, height = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row6 = Text(premium_health_right_box, text = ' ', grid = [0,8], width = 1, height = 1) # Creates space between two rows to improve appearance
premium_health_right_blank_row6 = Text(premium_health_right_box, text = ' ', grid = [0,2], width = 1, height = 1) # Creates space between two rows to improve appearance
# Create colour scheme #
# Main box
premium_health_title.text_color = pink
premium_health_window.bg = light_purple
premium_health_box.bg = 'white'
premium_health_back_button.bg = pink
# Log box
premium_health_log_title.text_color = light_purple
premium_health_log_lable.text_color = light_purple
premium_health_log_choose_workout_record_combo.bg = light_purple
premium_health_log_journal_lable.text_color = light_purple
premium_health_log_save_button.bg = light_purple
premium_health_log_calorie_consumption.text_color = light_purple
premium_health_log_water_consumption.text_color = light_purple
# Right box
premium_health_right_title.text_color = pink
premium_health_right_start_diet.text_color = pink
premium_health_right_diet_combo.bg = light_blue
premium_health_right_calorie_history.bg = light_blue 
premium_health_right_water_history.bg = light_blue
premium_health_male_calorie_text.text_color = pink
premium_health_female_calorie_text.text_color = pink
# Hide window
premium_health_window.hide()
